Continuation......# Microsoft
DAY 2..........

4.You are given an integer array nums of length n. Return maximum length of Rotation Function.

class Solution {
    public int maxRotateFunction(int[] nums) {
        int n=nums.length,sum=0;
        int dp[]=new int[n];
        for(int i=0;i<n;++i){
            sum+=nums[i];
            dp[0]+=i*nums[i];
        }
        int res=dp[0],ind=n-1;
        for(int i=1;i<n;++i){
            dp[i]=dp[i-1]+sum-(n*nums[ind]);
            ind--;
            res=Math.max(res,dp[i]);
        }
        return res;
    }
}


5.Largest Divisible Subset.

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n=nums.length;
        Arrays.sort(nums);
        List<Integer> ls=new ArrayList<>();
        int[] dp=new int[n+1];
        int[] hash=new int[n+1];
        for(int i=0;i<n;++i){
            dp[i]=1;
            hash[i]=i;
        }
        int lastIndex=0,res=1;
        for(int i=0;i<n;++i){
            for(int j=0;j<i;++j){
                if(nums[i]%nums[j]==0 && dp[i]<1+dp[j]){
                    dp[i]=1+dp[j];
                    hash[i]=j;
                }
                if(res<dp[i]){
                    res=dp[i];
                    lastIndex=i;
                }
            }
        }
        ls.add(nums[lastIndex]);
        while(hash[lastIndex]!=lastIndex){
            lastIndex=hash[lastIndex];
            ls.add(nums[lastIndex]);
        }
        return ls;
    }
}


6.How to find a perfect Rectangle.

